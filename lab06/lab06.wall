#********************************
# Lab06.txt
# Author:  Jecsan Blanco
# Version: 02/13/18
#
#********************************
                sip    main
#********************************
# Data-segment
#********************************
                org    0x20
Num1Str:        db     "127",0
Num1:           bss    1
Num2Str:        db     "128",0
Num2:           bss    1
Sum:            bss    1

#********************************
# Code-segment
#********************************

                org    0x00
main:
                load   R0,0xAB
                load   R1,1
# complete
                load   r2,Num1Str
                push   r2
                call   ASCII_To_Binary
                store  [Num1],RA
                move   RB,RA

                load   r2,Num2Str
                push   r2
                call   ASCII_To_Binary
                store  [Num2],RA

                add    RA,RA,RB
                store  [Sum],RA
                
                




                halt
        

#************************************************
# ASCII_To_Binary
# Decodes then ASCII string of numbers in to its 
# computable int representation.
#
# Call sequence:
#               PUSH the address of the string.
#               CALL ASCII_To_Binary
#               RA <-  Result 
#
#               Registers R1 - R6 are used and not preserved.
#************************************************
               org    0x30
ASCII_To_Binary:
ONE:            equ   R1
strAdrs:        equ   R2
char:           equ   R3
mask:           equ   R4
num:            equ   R5
temp:           equ   R6
answer:         equ   RA

                push  RBP         #store caller state
                move  RBP,RSP
                rload strAdrs,2[RBP]
                load  mask,0x0F    #mask to extract number

                push  R0
                push  R6         

                xor   R0,R0,R0     #zero R0
                xor   answer,answer,answer
               
                iload char,[strAdrs]

while:          jmpeq char=R0,end  #check if there are more chars
                and   num,char,mask
                push  num
                add   strAdrs,strAdrs,ONE
                iload char,[strAdrs]
                jmp   while
end:        
                #1st digit * 10 
                pop   num
                add   answer,answer,num
               
                # 2nd digit * 10
                pop   num 
                move  temp,num
                sl    num,3
                sl    temp,1
                add   num,num,temp
                add   answer,answer,num
               
                #3rd digit * 100
                pop   num
                move  temp,num
                sl    num,3
                sl    temp,1
                add   num,num,temp
                move  temp,num
                sl    num,3
                sl    temp,1
                add   num,num,temp
                add   answer,answer,num
               
                pop   R6
                pop   R0        #restore caller state
                pop   RBP
                ret   1

                


