#********************************
# Lab06.txt
# Author:  Jecsan Blanco
# Version: 02/13/18
#
#********************************
                sip    main
#********************************
# Data-segment
#********************************
                org    0x20
Num1Str:        db     "127",0
Num1:           bss    1
Num2Str:        db     "128",0
Num2:           bss    1
Sum:            bss    1

#********************************
# Code-segment
#********************************

                org    0x00
main:
                load   R0,0xAB
                load   R1,1
# complete
               load   r2,Num1Str
                push r2
                push R1
                call    ASCII_To_Binary
                halt
        

#************************************************
# ASCII_To_Binary
# Decodes then ASCII string of numbers in to its 
# computable int representation.
#
# Call sequence:
#               PUSH the address of the string.
#               CALL ASCII_To_Binary
#               RA <-  Result 
#
#               Registers R6 - RB are used.
#************************************************
               org    0x30
ASCII_To_Binary:
ONE:            equ   R1
strAdrs:        equ   R6
char:           equ   R7

                push  RBP        #store caller state
                move  RBP,RSP
                move  RBP,RSP
                push  R0         

                xor   R0,R0,R0    #zero R0
                rload strAdrs,3[RBP]

while:          jmpeq strAdrs=R0  #check if there are more chars
                                
                add   strAdrs,strAdrs,ONE
                jmp   while
end:

                pop   R0        #restore caller state
                pop   RBP
                ret   1

                


