
*************************** WALL-Listing ***********************

Location    Object Code       Line   Source Statement
                                 1   # **************************************************************
                                 2   
                                 3               sip    main         # set initial IP to address main
                                 4             
                                 5   # **************************************************************
                                 6   #   DATA SEGMENT
                                 7               org    0xA0
A0          02 04 06 08 0A       8    Array1:     db     2,4,6,8,10,12,14
            0C 0E                     
                                 9   Array1End:
A7                              10    Array1Sum:  bss    1
                                11               org    0XB0
B0          01 03 05 07 09      12    Array2:     db     1,3,5,7,9,11,13,15
            0B 0D 0F                  
                                13   Array2End:
B8                              14    Array2Sum:  bss    1
                                15               org    0XC0
C0                              16    SumAll:     bss    1
                                17   
                                18   ONE:        equ    R1
                                19   ArrayAdrs:  equ    R2
                                20   ArrayLen:   equ    R4
                                21   ALLONES:    equ    R9            
                                22   Answer:     equ    RA
                                23   # **************************************************************
                                24   
                                25   # **************************************************************
                                26   #   CODE SEGMENT
                                27               org    0x00
                                28   main:   # set up constants
00          21 01               29            load   R1,1             # constant 1
02          29 FF               30            load   ALLONES,0XFF     # bit toggle mask
                                31           #Array 1
04          22 A0               32            load   R2,Array1
06          23 A7               33            load   R3,Array1End      
                                34           
08          94 29               35            xor    R4,R2,ALLONES     # turn array1's address negative  
0A          54 41               36            add    R4,R4,ONE
0C          53 43               37            add    ArrayLen,R4,R3    
                                38           
0E          64 30               39            push   ArrayLen
10          64 20               40            push   ArrayAdrs
12          60 32               41            call   sumArray
14          3A A7               42            store  [Array1Sum],Answer 
                                43   
                                44           #Array2
16          22 B0               45            load   R2,Array2
18          23 B8               46            load   R3,Array2End      
                                47           
1A          94 29               48            xor    R4,R2,ALLONES     # turn array2's address negative  
1C          54 41               49            add    R4,R4,ONE
1E          53 43               50            add    ArrayLen,R4,R3    # get the array length 
                                51           
20          64 30               52            push   ArrayLen        
22          64 20               53            push   ArrayAdrs
24          60 32               54            call   sumArray
26          3A B8               55            store  [Array2Sum],Answer
                                56    
                                57           #sum all
28          11 A7               58            load  R1,[Array1Sum]
2A          12 B8               59            load  R2,[Array2Sum]
2C          5A 12               60            add    RA,R1,R2
2E          3A C0               61            store  [SumAll],RA   
30          C0 00               62            halt
                                63   
                                64   # **************************************************************
                                65   # sumArray
                                66   #
                                67   # PURPOSE:  iterate and sum over all k elements of an array
                                68   #
                                69   # CALLING SEQUENCE:  PUSH address of 0th element of array
                                70   #                    PUSH value of number of elements in array
                                71   #                    CALL sumArray
                                72   #
                                73   # RETURN VALUE:      sum returned in RA
                                74   #
                                75   # **************************************************************
                                76   ONE:        equ    R1
                                77   ArrayAdrs:  equ    R2
                                78   ArrayLen:   equ    R3  
                                79   i:          equ    R4
                                80   t:          equ    R5         
                                81   Answer:     equ    RA
                                82   
                                83   sumArray:
32          64 D0               84            push   RBP
34          D2 DE               85            move   RBP,RSP
                                86           
                                87          
                                88   # student code goes here
36          64 00               89            push   R0           #save callers state
38          64 10               90            push   ONE
3A          64 20               91            push   ArrayAdrs
3C          64 30               92            push   ArrayLen
3E          64 40               93            Push   i
40          64 50               94            push   t
                                95   
42          21 01               96            load   ONE,1
44          42 2D               97            rload  ArrayAdrs, 0x02[RBP]
46          43 3D               98            rload  ArrayLen,0x03[RBP] 
                                99           
48          D2 03              100            move   r0,ArrayLen
                               101   
4A          94 44              102            xor    i,i,i
4C          9A AA              103            xor    Answer,Answer,Answer
                               104   
4E          B4 5A              105    while:  jmpeq  i=R0,end
50          D0 52              106            iload   t,[ArrayAdrs]
52          5A A5              107            add     Answer,Answer,t
                               108      
54          54 41              109            add    i,i,ONE                       #i++
56          52 21              110            add    ArrayAdrs,ArrayAdrs,ONE       #move to next num
58          B0 4E              111            jmp    while
                               112   end:
                               113          
5A          65 50              114            pop    t
5C          65 40              115            pop    i
5E          65 30              116            pop    ArrayLen
60          65 20              117            pop    ArrayAdrs
62          65 10              118            pop    ONE
64          65 00              119            pop    R0
                               120   
66          D2 ED              121            move   RSP,RBP
68          65 D0              122            pop    RBP
6A          61 03              123            ret    2
                               124    
                               125    # **************************************************************


***************** WALL Cross-Reference Listing *******************

         Cross-Reference Listing Description
Labels: The label name that appears in the source program.
Mem_Loc: Memory location of a label in the memory. If the value
         starts with 'R', it represents a register. If the value
         starts with a 'label', it means labels mapped to labels.
Def_Line: Defined line number of a label in the source code.
Ref_line: Referenced line number(s) of a label in the source code.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Labels           Mem_Loc     Def_Line     Ref_line
Array1              A0           8        32             
Array1End           A7           9        33             
Array1Sum           A7          10        42  58         
Array2              B0          12        45             
Array2End           B8          13        46             
Array2Sum           B8          14        55  59         
SumAll              C0          16        61             
ONE                 R1          18        36  49  90  96  109  110  118  
ArrayAdrs           R2          19        40  53  91  97  106  110  110  117  
ArrayLen            R3          20        37  39  50  52  92  98  100  116  
ALLONES             R9          21        30  35  48     
Answer              RA          22        42  55  103  103  103  107  107  
main                00          28                       
ONE                 R1          76        36  49  90  96  109  110  118  
ArrayAdrs           R2          77        40  53  91  97  106  110  110  117  
ArrayLen            R3          78        37  39  50  52  92  98  100  116  
i                   R4          79        93  102  102  102  109  109  115  
t                   R5          80        94  106  107  114  
Answer              RA          81        42  55  103  103  103  107  107  
sumArray            32          83        41  54         
while               4E         105        111            
end                 5A         112        105            
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Created date: 02/11/2018 11:56:08 AM
