
*************************** WALL-Listing ***********************

Location    Object Code       Line   Source Statement
                                 1   #********************************
                                 2   # Lab06.txt
                                 3   # Author:  Jecsan Blanco
                                 4   # Version: 02/13/18
                                 5   #
                                 6   #********************************
                                 7                   sip    main
                                 8   #********************************
                                 9   # Data-segment
                                10   #********************************
                                11                   org    0x20
20          31 32 37 00         12    Num1Str:        db     "127",0
24                              13    Num1:           bss    1
25          31 32 38 00         14    Num2Str:        db     "128",0
29                              15    Num2:           bss    1
2A                              16    Sum:            bss    1
                                17   
                                18   #********************************
                                19   # Code-segment
                                20   #********************************
                                21   
                                22                   org    0x00
                                23   main:
00          20 AB               24                    load   R0,0xAB
02          21 01               25                    load   R1,1
                                26   # complete
04          22 20               27                    load   r2,Num1Str
06          64 20               28                    push   r2
08          60 30               29                    call    ASCII_To_Binary
0A          C0 00               30                    halt
                                31           
                                32   
                                33   #************************************************
                                34   # ASCII_To_Binary
                                35   # Decodes then ASCII string of numbers in to its 
                                36   # computable int representation.
                                37   #
                                38   # Call sequence:
                                39   #               PUSH the address of the string.
                                40   #               CALL ASCII_To_Binary
                                41   #               RA <-  Result 
                                42   #
                                43   #               Registers R6 - RB are used.
                                44   #************************************************
                                45                  org    0x30
                                46   ASCII_To_Binary:
                                47   ONE:            equ   R1
                                48   strAdrs:        equ   R6
                                49   char:           equ   R7
                                50   mask:           equ   R8
                                51   num:            equ   R9
                                52   
30          64 D0               53                    push  RBP        #store caller state
32          D2 DE               54                    move  RBP,RSP
34          42 6D               55                    rload strAdrs,2[RBP]
36          28 0F               56                    load  mask,0x0F    #mask to extract number
                                57   
38          64 00               58                    push  R0         
                                59   
3A          90 00               60                    xor   R0,R0,R0    #zero R0
                                61                  
3C          D0 76               62                    iload char,[strAdrs]
3E          B7 48               63    while:          jmpeq char=R0,end  #check if there are more chars
40          89 78               64                    and   num,char,mask
                                65             
42          56 61               66                    add   strAdrs,strAdrs,ONE
44          D0 76               67                    iload char,[strAdrs]
46          B0 3E               68                    jmp   while
                                69   end:
                                70   
48          65 00               71                    pop   R0        #restore caller state
4A          65 D0               72                    pop   RBP
4C          61 02               73                    ret   1
                                74   
                                75                   


***************** WALL Cross-Reference Listing *******************

         Cross-Reference Listing Description
Labels: The label name that appears in the source program.
Mem_Loc: Memory location of a label in the memory. If the value
         starts with 'R', it represents a register. If the value
         starts with a 'label', it means labels mapped to labels.
Def_Line: Defined line number of a label in the source code.
Ref_line: Referenced line number(s) of a label in the source code.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Labels           Mem_Loc     Def_Line     Ref_line
Num1Str             20          12        27             
Num1                24          13                       
Num2Str             25          14                       
Num2                29          15                       
Sum                 2A          16                       
main                00          23                       
ASCII_To_Binary     30          46        29             
ONE                 R1          47        66             
strAdrs             R6          48        55  62  66  66  67  
char                R7          49        62  64  67     
mask                R8          50        56  64         
num                 R9          51        64             
while               3E          63        68             
end                 48          69        63             
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Created date: 02/17/2018 09:33:03 AM
