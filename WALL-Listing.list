
*************************** WALL-Listing ***********************

Location    Object Code       Line   Source Statement
                                 1   # **************************************************************
                                 2   
                                 3               sip    main         # set initial IP to address main
                                 4             
                                 5   # **************************************************************
                                 6   #   DATA SEGMENT
                                 7               org    0xA0
A0          02 04 06 08 0A       8    Array1:     db     2,4,6,8,10,12,14
            0C 0E                     
                                 9   Array1End:
A7                              10    Array1Sum:  bss    1
                                11               org    0XB0
B0          01 03 05 07 09      12    Array2:     db     1,3,5,7,9,11,13,15
            0B 0D 0F                  
                                13   Array2End:
B8                              14    Array2Sum:  bss    1
                                15               org    0XC0
C0                              16    SumAll:     bss    1
                                17   
                                18   ONE:        equ    R1
                                19   ArrayAdrs:  equ    R2
                                20   ArrayLen:   equ    R4
                                21   ALLONES:    equ    R9            
                                22   Answer:     equ    RA
                                23   # **************************************************************
                                24   
                                25   # **************************************************************
                                26   #   CODE SEGMENT
                                27               org    0x00
                                28   main:   # set up constants
00          21 01               29            load   R1,1             # constant 1
02          29 FF               30            load   ALLONES,0XFF     # bit toggle mask
                                31   
04          22 A0               32            load   R2,Array1
06          23 A7               33            load   R3,Array1End      
                                34           
08          94 29               35            xor    R4,R2,ALLONES     # turn array1's address negative  
0A          54 41               36            add    R4,R4,ONE
0C          53 43               37            add    ArrayLen,R4,R3    
                                38           
0E          64 30               39            push   ArrayLen
10          64 20               40            push   ArrayAdrs
12          60 18               41            call   sumArray
                                42    
                                43           
14          3A A7               44            store  [Array1Sum],Answer 
                                45    
16          C0 00               46            halt
                                47   
                                48   # **************************************************************
                                49   # sumArray
                                50   #
                                51   # PURPOSE:  iterate and sum over all k elements of an array
                                52   #
                                53   # CALLING SEQUENCE:  PUSH address of 0th element of array
                                54   #                    PUSH value of number of elements in array
                                55   #                    CALL sumArray
                                56   #
                                57   # RETURN VALUE:      sum returned in RA
                                58   #
                                59   # **************************************************************
                                60   ONE:        equ    R1
                                61   ArrayAdrs:  equ    R2
                                62   ArrayLen:   equ    R3  
                                63   i:          equ    R4
                                64   t:          equ    R5         
                                65   Answer:     equ    RA
                                66   
                                67   sumArray:
18          64 D0               68            push   RBP
1A          D2 DE               69            move   RBP,RSP
                                70           
                                71          
                                72   # student code goes here
1C          64 00               73            push   R0           #save callers state
1E          64 10               74            push   ONE
20          64 20               75            push   ArrayAdrs
22          64 30               76            push   ArrayLen
24          64 40               77            Push   i
26          64 50               78            push   t
                                79   
28          21 01               80            load   ONE,1
2A          42 2D               81            rload  ArrayAdrs, 0x02[RBP]
2C          43 3D               82            rload  ArrayLen,0x03[RBP] 
                                83           
2E          D2 03               84            move   r0,ArrayLen
                                85   
30          94 44               86            xor    i,i,i
32          9A AA               87            xor    Answer,Answer,Answer
                                88   
34          B4 40               89    while:  jmpeq  i=R0,end
36          D0 52               90            iload   t,[ArrayAdrs]
38          5A A5               91            add     Answer,Answer,t
                                92      
3A          54 41               93            add    i,i,ONE                       #i++
3C          52 21               94            add    ArrayAdrs,ArrayAdrs,ONE       #move to next num
3E          B0 34               95            jmp    while
                                96   end:
                                97          
40          65 50               98            pop    t
42          65 40               99            pop    i
44          65 30              100            pop    ArrayLen
46          65 20              101            pop    ArrayAdrs
48          65 10              102            pop    ONE
4A          65 00              103            pop    R0
                               104   
4C          D2 ED              105            move   RSP,RBP
4E          65 D0              106            pop    RBP
50          61 03              107            ret    2
                               108    
                               109    # **************************************************************


***************** WALL Cross-Reference Listing *******************

         Cross-Reference Listing Description
Labels: The label name that appears in the source program.
Mem_Loc: Memory location of a label in the memory. If the value
         starts with 'R', it represents a register. If the value
         starts with a 'label', it means labels mapped to labels.
Def_Line: Defined line number of a label in the source code.
Ref_line: Referenced line number(s) of a label in the source code.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Labels           Mem_Loc     Def_Line     Ref_line
Array1              A0           8        32             
Array1End           A7           9        33             
Array1Sum           A7          10        44             
Array2              B0          12                       
Array2End           B8          13                       
Array2Sum           B8          14                       
SumAll              C0          16                       
ONE                 R1          18        36  74  80  93  94  102  
ArrayAdrs           R2          19        40  75  81  90  94  94  101  
ArrayLen            R3          20        37  39  76  82  84  100  
ALLONES             R9          21        30  35         
Answer              RA          22        44  87  87  87  91  91  
main                00          28                       
ONE                 R1          60        36  74  80  93  94  102  
ArrayAdrs           R2          61        40  75  81  90  94  94  101  
ArrayLen            R3          62        37  39  76  82  84  100  
i                   R4          63        77  86  86  86  93  93  99  
t                   R5          64        78  90  91  98  
Answer              RA          65        44  87  87  87  91  91  
sumArray            18          67        41             
while               34          89        95             
end                 40          96        89             
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Created date: 02/11/2018 11:45:56 AM
