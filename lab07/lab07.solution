                sip    main
# **********************************************
# FILE:  lab07.txt
#
# PURPOSE:  Perform a computation and displays
#           results on console
#
# PROGRAMMER: H. Paul Haiduk
#
# DATE: 02/17/2018
# **********************************************


# **********************************************
#       Data Declarations
# **********************************************
                org    0x20
Number1:        db     127
Number2:        db     128
Sum:            bss    1
Message:        db     "Sum is -> ",0


# **********************************************
#       Main Program
# **********************************************
                org    0x00
main:
                load   R0,0xAB
                load   R1,1

                load   R2,[Number1]
                load   R3,[Number2]
                add    R2,R2,R3
                store  [Sum],R2

                load   R3,Message
                push   R3
                call   PrintMessage
                push   R2
                call   PrintByte
                
                halt

# **********************************************
#       Functions/Procedures 
# **********************************************
                org    0x30
# ########################################################
#
#  Calling sequence:  push value to be multiplied
#                     call Mult10
#
#  Return:    value*10 in RA
#
#  Registers Used: R6 and R7
#  
# ########################################################  
Mult10:         
                push   RBP
                move   RBP,RSP

                rload  R6,2[RBP]
                move   R7,R6
                sl     R6,3        #*8
                sl     R7,1        #*2
                add    RA,R7,R6

                move   RSP,RBP
                pop    RBP
                ret    1
# ########################################################
#
#  Calling sequence:  push value to be divided
#                     call DivU10
#
#  Return:    quotient in RA, remainder in RB
#
#  Registers Used: R6, R7, R8, and R9
#  
# ######################################################## 
DivU10:
                push   RBP
                move   RBP,RSP
                push   R0

                rload  R6,2[RBP]
                move   R7,R6
                srl    R6,1
                srl    R7,2
                add    RA,R7,R6  # q = (arg >> 1) + (arg >> 2)
                move   R9,RA
                srl    R9,4      # q >>4
                add    RA,RA,R9  # q = q + (q >> 4)
                srl    RA,3      # q = (q >> 3)
                move   R8,RA  
                push   R8
                call   Mult10
                load   R6,0xFF
                xor    RA,RA,R6
                add    RA,RA,R1
                rload  R6,2[RBP]
                add    RB,RA,R6  # r = arg - q*10   
                move   RA,R8     # q
                move   R0,RB
                load   R9,9
                jmpLT  R9<R0,fixIt    # 9 < r?
                jmp    normalReturn
fixIt:          add    RA,RA,R1    # q = q + 1                   
                load   R9,-10
                add    RB,RB,R9    # r = r - 10

normalReturn:   pop    R0
                move   RSP,RBP
                pop    RBP
                ret    1

# ########################################################
#
#  Calling sequence:  push address of message
#                     call printMessage
#
#  Return:    message displayed on console
#
#  Registers Used: R6, R7
#  
# ######################################################## 
PrintMessage:
                push   RBP
                move   RBP,RSP
                push   R0

                rload  R6,2[RBP]
                load   R0,0
messageLoop:
                iload  R7,[R6]
                jmpEQ  R7=R0,msgReturn
                move   RF,R7
                add    R6,R6,R1
                jmp    messageLoop

msgReturn:      pop    R0
                move   RSP,RBP
                pop    RBP
                ret    1

# ########################################################
#
#  Calling sequence:  push value to be displayed
#                     call PrintByte
#
#  Return:    displays ASCII characters on console
#
#  Registers Used:  R6 and R7
#  
# ########################################################
PrintByte:
                push   RBP
                move   RBP,RSP
                push   R0

                rload  R6,2[RBP]
                load   R0,10
                jmpLT  R6<R0,singleDigit

                pop    R0
                push   R6
                call   DivU10
                push   RA
                call   PrintByte
                rload  R6,2[RBP]
                push   R6
                call   DivU10
                load   R7,0x30
                or     RF,RB,R7    # display ASCII of digit
                jmp    printReturn

singleDigit:
                pop    R0
                load   R7,0x30
                or     RF,R7,R6    # display ASCII of digit

printReturn:
                move   RSP,RBP
                pop    RBP
                ret    1
