# **************************************************************

            sip    main         # set initial IP to address main
          
# **************************************************************
#   DATA SEGMENT
            org    0xA0
Array1:     db     2,4,6,8,10,12,14
Array1End:
Array1Sum:  bss    1
            org    0XB0
Array2:     db     1,3,5,7,9,11,13,15
Array2End:
Array2Sum:  bss    1
            org    0XC0
SumAll:     bss    1

ONE:        equ    R1
ArrayAdrs:  equ    R2
ArrayLen:   equ    R4
ALLONES:    equ    R9            
Answer:     equ    RA
# **************************************************************

# **************************************************************
#   CODE SEGMENT
            org    0x00
main:   # set up constants
        load   R1,1             # constant 1
        load   ALLONES,0XFF     # bit toggle mask

        load   R2,Array1
        load   R3,Array1End      
        
        xor    R4,R2,ALLONES     # turn array1's address negative  
        add    R4,R4,ONE
        add    ArrayLen,R4,R3    
        
        push   ArrayLen
        push   ArrayAdrs
        call   sumArray
 
        halt

# **************************************************************
# sumArray
#
# PURPOSE:  iterate and sum over all k elements of an array
#
# CALLING SEQUENCE:  PUSH address of 0th element of array
#                    PUSH value of number of elements in array
#                    CALL sumArray
#
# RETURN VALUE:      sum returned in RA
#
# **************************************************************
ONE:        equ    R1
ArrayAdrs:  equ    R2
ArrayLen:   equ    R4           
Answer:     equ    RA

sumArray:
        push   RBP
        move   RBP,RSP
        
       
# student code goes here
        push   R0           #save callers state
        push   ONE
        push   ArrayAdrs
        push   ArrayLen
        push   Answer

        load   ONE,1
        rload  ArrayAdrs, 0x02[RBP]
        rload  ArrayLen,0x03[RBP] 
        
        load   R0,ArrayLen

while:  jmpeq  


end:

        move   RSP,RBP
        pop    RBP
        ret    2
 
 # **************************************************************
