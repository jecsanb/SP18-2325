
# *****************************************************************************************
# FILE:         lab05.txt
# PURPOSE:      Calculate the sum of all the members of Array1 length of N,
#               as well as the sum of all the members of Array2 length of N.
#
#               Array1Sum  will hold sum of Array1's members and Array2Sum the sum of Array2's members.
#               SumAll holds the sum of Array1Sum and Array2Sum.
#
#               The sum of the members of the array and the sum of the two arrays may not exceed
#               254 otherwise overflow occur
#
#
#
# WRITTEN BY:   Jecsan Blanco
# DATE:         02/11/2018
#*****************************************************************************************   
#
# **************************************************************

            sip    main         # set initial IP to address main
          
# **************************************************************
#   DATA SEGMENT
            org    0xA0
Array1:     db     2,4,6,8,10,12,14
Array1End:
Array1Sum:  bss    1
            org    0XB0
Array2:     db     1,3,5,7,9,11,13,15
Array2End:
Array2Sum:  bss    1
            org    0XC0
SumAll:     bss    1

ONE:        equ    R1
ArrayAdrs:  equ    R2
ArrayLen:   equ    R4
ALLONES:    equ    R9            
Answer:     equ    RA
# **************************************************************

# **************************************************************
#   CODE SEGMENT
            org    0x00
main:   # set up constants
        load   R1,1             # constant 1
        load   ALLONES,0XFF     # bit toggle mask
        #Array 1
        load   R2,Array1
        load   R3,Array1End      
        
        xor    R4,R2,ALLONES     # turn array1's address negative  
        add    R4,R4,ONE
        add    ArrayLen,R4,R3    
        
        push   ArrayLen
        push   ArrayAdrs
        call   sumArray
        store  [Array1Sum],Answer 

        #Array2
        load   R2,Array2
        load   R3,Array2End      
        
        xor    R4,R2,ALLONES     # turn array2's address negative  
        add    R4,R4,ONE
        add    ArrayLen,R4,R3    # get the array length 
        
        push   ArrayLen        
        push   ArrayAdrs
        call   sumArray
        store  [Array2Sum],Answer
 
        #sum all
        load   R1,[Array1Sum]
        load   R2,[Array2Sum]
        add    RA,R1,R2
        store  [SumAll],RA   
        halt

# **************************************************************
# sumArray
#
# PURPOSE:  iterate and sum over all k elements of an array
#           The callers registers are preserved
#
# CALLING SEQUENCE:  PUSH address of 0th element of array
#                    PUSH value of number of elements in array
#                    CALL sumArray
#
# RETURN VALUE:      sum returned in RA
#
# **************************************************************
ONE:        equ    R1
ArrayAdrs:  equ    R2
ArrayLen:   equ    R3  
i:          equ    R4
t:          equ    R5         
Answer:     equ    RA

sumArray:
        push   RBP
        move   RBP,RSP
        
       
# student code goes here
        push   R0                            # save callers state
        push   ONE
        push   ArrayAdrs
        push   ArrayLen
        Push   i
        push   t

        load   ONE,1
        rload  ArrayAdrs, 0x02[RBP]
        rload  ArrayLen,0x03[RBP] 
        
        move    r0,ArrayLen

        xor     i,i,i
        xor     Answer,Answer,Answer

while:  jmpeq   i=R0,end
        iload   t,[ArrayAdrs]
        add     Answer,Answer,t
   
        add     i,i,ONE                       # i++
        add     ArrayAdrs,ArrayAdrs,ONE       # move to next num
        jmp     while
end:
       
        pop    t                              # restore callers state
        pop    i
        pop    ArrayLen
        pop    ArrayAdrs
        pop    ONE
        pop    R0

        move   RSP,RBP
        pop    RBP
        ret    2
